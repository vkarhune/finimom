// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// arma_setdiff
inline arma::vec arma_setdiff(arma::vec x, arma::vec y);
RcppExport SEXP _finimom_arma_setdiff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(arma_setdiff(x, y));
    return rcpp_result_gen;
END_RCPP
}
// subset_vector
inline arma::vec subset_vector(arma::vec x, arma::uvec pos);
RcppExport SEXP _finimom_subset_vector(SEXP xSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_vector(x, pos));
    return rcpp_result_gen;
END_RCPP
}
// set_vector_vals
inline arma::vec set_vector_vals(arma::vec x, arma::uvec pos, arma::vec vals);
RcppExport SEXP _finimom_set_vector_vals(SEXP xSEXP, SEXP posSEXP, SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vals(valsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_vector_vals(x, pos, vals));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix
inline arma::mat subset_matrix(arma::mat x, arma::uvec pos);
RcppExport SEXP _finimom_subset_matrix(SEXP xSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix(x, pos));
    return rcpp_result_gen;
END_RCPP
}
// LMarlik
inline double LMarlik(arma::vec beta, arma::mat sematinv, arma::vec z, arma::vec tau, double psi, double r, int d, arma::mat LDmat, double gval);
RcppExport SEXP _finimom_LMarlik(SEXP betaSEXP, SEXP sematinvSEXP, SEXP zSEXP, SEXP tauSEXP, SEXP psiSEXP, SEXP rSEXP, SEXP dSEXP, SEXP LDmatSEXP, SEXP gvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sematinv(sematinvSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LDmat(LDmatSEXP);
    Rcpp::traits::input_parameter< double >::type gval(gvalSEXP);
    rcpp_result_gen = Rcpp::wrap(LMarlik(beta, sematinv, z, tau, psi, r, d, LDmat, gval));
    return rcpp_result_gen;
END_RCPP
}
// gfunc
inline double gfunc(arma::vec x, arma::vec z, arma::mat sematinv, arma::mat LDmat, arma::vec tau, double r);
RcppExport SEXP _finimom_gfunc(SEXP xSEXP, SEXP zSEXP, SEXP sematinvSEXP, SEXP LDmatSEXP, SEXP tauSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sematinv(sematinvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LDmat(LDmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(gfunc(x, z, sematinv, LDmat, tau, r));
    return rcpp_result_gen;
END_RCPP
}
// posterior
Rcpp::List posterior(Rcpp::List dat, arma::vec tau, int maxsize, double r, int p, int niter, arma::vec lpriorval);
RcppExport SEXP _finimom_posterior(SEXP datSEXP, SEXP tauSEXP, SEXP maxsizeSEXP, SEXP rSEXP, SEXP pSEXP, SEXP niterSEXP, SEXP lpriorvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type maxsize(maxsizeSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lpriorval(lpriorvalSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior(dat, tau, maxsize, r, p, niter, lpriorval));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_finimom_arma_setdiff", (DL_FUNC) &_finimom_arma_setdiff, 2},
    {"_finimom_subset_vector", (DL_FUNC) &_finimom_subset_vector, 2},
    {"_finimom_set_vector_vals", (DL_FUNC) &_finimom_set_vector_vals, 3},
    {"_finimom_subset_matrix", (DL_FUNC) &_finimom_subset_matrix, 2},
    {"_finimom_LMarlik", (DL_FUNC) &_finimom_LMarlik, 9},
    {"_finimom_gfunc", (DL_FUNC) &_finimom_gfunc, 6},
    {"_finimom_posterior", (DL_FUNC) &_finimom_posterior, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_finimom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
